// use raylib::{
//     audio::{Music, RaylibAudio},
//     prelude::RaylibDrawHandle,
// };

// /// A simple wrapper around a single audio clip.
// pub struct AudioWrapper {
//     music: Music,
// }

// impl AudioWrapper {
//     /// Create a new AudioWrapper from a `Music` struct
//     pub fn new(music: Music) -> Self {
//         Self { music }
//     }

//     /// Begin playing the audio
//     pub fn play(&mut self, audio_handle: &mut RaylibAudio) {
//         audio_handle.play_music_stream(&mut self.music);
//     }

//     /// Stop playing the audio
//     pub fn stop(&mut self, audio_handle: &mut RaylibAudio) {
//         audio_handle.stop_music_stream(&mut self.music);
//     }

//     /// Pause the audio
//     pub fn pause(&mut self, audio_handle: &mut RaylibAudio) {
//         audio_handle.pause_music_stream(&mut self.music);
//     }

//     /// Call this every frame
//     pub fn update(&mut self, audio_handle: &mut RaylibAudio) {
//         audio_handle.update_music_stream(&mut self.music);
//     }

//     /// Check if this audio clip is playing
//     pub fn is_playing(&mut self, audio_handle: &mut RaylibAudio) -> bool {
//         return audio_handle.is_music_playing(&mut self.music);
//     }
// }
